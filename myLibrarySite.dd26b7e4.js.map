{"mappings":"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","sources":["src/js/fetchResponse.js","src/js/modal.js"],"sourcesContent":["const API_KEY = '18cc3ec683925dedb66d3e6092890eaa';\n\nconst fetchResponseTrend = async pagenr => {\n  const responseTrend = await fetch(\n    `https://api.themoviedb.org/3/trending/movie/week?api_key=${API_KEY}&page=${pagenr}`\n  );\n  if (!responseTrend.ok) throw new Error();\n  const moviesTrend = await responseTrend.json();\n  return moviesTrend;\n};\n\nconst fetchResponseSearch = async (search, pagenr) => {\n  const responseSearch = await fetch(\n    `https://api.themoviedb.org/3/search/movie?api_key=${API_KEY}&language=pl-PL&query=${search}&page=${pagenr}&include_adult=false`\n  );\n  if (!responseSearch.ok) throw new Error();\n  const moviesSearch = await responseSearch.json();\n  return moviesSearch;\n};\n\nconst fetchResponseDetails = async movieID => {\n  const responseDetails = await fetch(\n    `https://api.themoviedb.org/3/movie/${movieID}?api_key=${API_KEY}&language=pl-PL`\n  );\n  if (!responseDetails.ok) throw new Error();\n  const moviesDetails = await responseDetails.json();\n  return moviesDetails;\n};\n\n// gatunki filmowe \n\nconst getGenres = async () => {\n  try {\n    const responseGenre = await fetch(\n      `https://api.themoviedb.org/3/genre/movie/list?api_key=${API_KEY}&language=pl-PL`\n    );\n    if (!responseGenre.ok) throw new Error();\n    const genresProm = await responseGenre.json();\n    return genresProm;\n    \n  } catch (error) {}\n};\n\nconst getGenreNames = async genreIDs => {\n  try {\n    const genrePromise = await getGenres();\n    const genreArr = genrePromise.genres;\n    const genreNames = genreIDs\n      .map(genreID => genreArr.find(genre => genre.id === genreID).name)\n      .join(', ');\n    return genreNames;\n  } catch (error) {}\n};\n\n\nexport { fetchResponseTrend, fetchResponseSearch, fetchResponseDetails, getGenreNames };\n","import {\n  fetchResponseTrend,\n  fetchResponseSearch,\n  fetchResponseDetails,\n  getGenreNames,\n} from './fetchResponse';\n\nconst pagination = document.querySelector('.pagination__list');\nconst filmList = document.querySelector('.film-list');\nconst prev = document.querySelector('.prev');\nconst next = document.querySelector('.next');\nconst watchedButton = document.querySelector('#watchedButton');\nconst queueButton = document.querySelector('#queueButton');\n\nlet page = 1;\n\n//======= MODAL =======//\nconst modalPicture = document.querySelector('.modal__img-picture');\nconst modalTitle = document.querySelector('.modal__head');\nconst modalRating = document.querySelector('.modal__rating');\nconst modalVotes = document.querySelector('.modal__votes-number');\nconst modalPopularity = document.querySelector('.modal__popularity-total');\nconst modalOriginalTitle = document.querySelector('.modal__title-original');\nconst modalGenre = document.querySelector('.modal__genre-description');\nconst modalDescription = document.querySelector('.modal__text');\nconst modalBtnWatched = document.querySelector('.modal__button-watched');\nconst modalBtnQueued = document.querySelector('.modal__button-queue');\n\nfilmList.innerHTML = '';\npagination.innerHTML = '';\nnext.style.display = 'none';\nprev.style.display = 'none';\n\nfunction changePage(totalPages, page) {\n  let liTag = '';\n  let activeLi;\n  let beforePages = page - 2;\n  let afterPages = page + 2;\n  pagination.innerHTML = '';\n\n  if (totalPages < 7) {\n    for (let i = 1; i <= totalPages; i++) {\n      if (page === i) {\n        activeLi = 'btn__active';\n      } else {\n        activeLi = '';\n      }\n      liTag += `<li class=\"num ${activeLi} pagination__item\"><span>${i}</span></li>`;\n    }\n  } else {\n    if (page > 2) {\n      liTag += `<li class=\"num-first pagination__item\"><span>1</span></li>`;\n      if (page > 4) {\n        liTag += `<li class=\"dots\"><span>...</span></li>`;\n      }\n    }\n    if (totalPages > 6) {\n      if (page === totalPages) {\n        beforePages = beforePages - 2;\n      }\n      if (page === totalPages - 1) {\n        beforePages = beforePages - 1;\n      }\n      if (page === totalPages - 2) {\n        beforePages = beforePages - 1;\n        afterPages = afterPages - 1;\n      }\n\n      if (page === 1) {\n        afterPages = afterPages + 2;\n        beforePages = beforePages + 1;\n      }\n      if (page === 2) {\n        afterPages = afterPages + 1;\n      }\n      if (page === 3) {\n        afterPages = afterPages + 1;\n        beforePages = beforePages + 1;\n      }\n    }\n\n    for (let pageLength = beforePages; pageLength <= afterPages; pageLength++) {\n      if (pageLength > totalPages) {\n        continue;\n      }\n      if (pageLength === 0) {\n        pageLength++;\n      }\n      if (page === pageLength) {\n        activeLi = 'btn__active';\n      } else {\n        activeLi = '';\n      }\n      liTag += `<li class=\"num ${activeLi} pagination__item\"><span>${pageLength}</span></li>`;\n    }\n\n    if (page < totalPages - 1) {\n      if (page < totalPages - 3) {\n        liTag += `<li class=\"dots\"><span>...</span></li>`;\n      }\n      liTag += `<li class=\"num-last pagination__item\"><span>${totalPages}</span></li>`;\n    }\n  }\n\n  pagination.innerHTML = liTag;\n}\n\nconst ChangeFilmInfo = async film => {\n  modalPicture.src = `https://image.tmdb.org/t/p/w400/${film.poster_path}`;\n  modalTitle.innerHTML = `${film.title}`;\n  modalRating.innerHTML = `${film.vote_average.toFixed(1)}`;\n  modalVotes.innerHTML = `${film.vote_count}`;\n  modalPopularity.innerHTML = `${film.popularity.toFixed(1)}`;\n  modalOriginalTitle.innerHTML = `${film.original_title}`;\n  modalGenre.innerHTML = `${film.genres.map(genre => genre.name).join(', ')}`;\n  modalDescription.innerHTML = `${film.overview}`;\n};\n\nconst addFilms = movies => {\n  const markup = movies\n    .map(\n      film =>\n        `<div class=\"single-film\" data-id=\"${film.id}\" data-modal-open>\n            <img class=\"film-image\" src=\"https://image.tmdb.org/t/p/w400/${\n              film.poster_path\n            }\"\n                alt=\"${film.title}\">\n            <div class=\"film-info\">\n                <p class=\"film-title\">${film.title}</p>\n                <div class=\"film-subinfo\">\n                    <p class=\"film-genre\">${film.genres\n                      .map(genre => genre.name)\n                      .join(', ')}</p>\n                    <p>${film.release_date}</p>\n                </div>\n            </div>\n        </div>`\n    )\n    .join('');\n  filmList.innerHTML = markup;\n\n  const filmArray = document.querySelectorAll('.single-film');\n  filmArray.forEach(film => {\n    film.addEventListener('click', async e => {\n      e.preventDefault();\n      const filmId = e.target.dataset.id;\n      console.log(filmId);\n      const filmData = await fetchResponseDetails(filmId);\n      ChangeFilmInfo(filmData);\n\n      modalBtnWatched.addEventListener('click', () => {\n        watchedFilmsStorage.push({\n          id: filmData.id,\n          poster_path: filmData.poster_path,\n          title: filmData.title,\n          release_date: filmData.release_date,\n          vote_average: filmData.vote_average,\n          vote_count: filmData.vote_count,\n          popularity: filmData.popularity,\n          original_title: filmData.original_title,\n          genres: filmData.genres,\n          overview: filmData.overview,\n        });\n        const watch = 'id';\n        const watchUniqueByKey = [\n          ...new Map(\n            watchedFilmsStorage.map(item => [item[watch], item])\n          ).values(),\n        ];\n\n        localStorage.setItem('Watched films', JSON.stringify(watchUniqueByKey));\n      });\n\n      modalBtnQueued.addEventListener('click', () => {\n        queuedFilmsStorage.push({\n          id: filmData.id,\n          poster_path: filmData.poster_path,\n          title: filmData.title,\n          release_date: filmData.release_date,\n          vote_average: filmData.vote_average,\n          vote_count: filmData.vote_count,\n          popularity: filmData.popularity,\n          original_title: filmData.original_title,\n          genres: filmData.genres,\n          overview: filmData.overview,\n        });\n        const queue = 'id';\n        const queueUniqueByKey = [\n          ...new Map(\n            queuedFilmsStorage.map(item => [item[queue], item])\n          ).values(),\n        ];\n        localStorage.setItem('Queued films', JSON.stringify(queueUniqueByKey));\n      });\n    });\n  });\n\n  (() => {\n    const refs = {\n      openModalBtn: document.querySelectorAll('[data-modal-open]'),\n      closeModalBtn: document.querySelector('[data-modal-close]'),\n      modal: document.querySelector('[data-modal]'),\n    };\n    refs.openModalBtn.forEach(open =>\n      open.addEventListener('click', toggleModal)\n    );\n\n    function toggleModal() {\n      refs.modal.classList.toggle('is-hidden');\n    }\n    if (!refs.modal.classList.contains('is-hidden')) {\n      refs.closeModalBtn.addEventListener('click', () => {\n        refs.modal.classList.add('is-hidden');\n      });\n      document.addEventListener('keydown', e => {\n        if (e.key == 'Escape') {\n          refs.modal.classList.add('is-hidden');\n        }\n      });\n    }\n  })();\n};\n\nconst scrollup = () => {\n  window.scrollTo({\n    top: 0,\n    left: 0,\n    behavior: 'smooth',\n  });\n};\n\nconst savedWatched = localStorage.getItem('Watched films');\nconst savedQueued = localStorage.getItem('Queued films');\n\nconst parsedWatched = JSON.parse(savedWatched);\nconst parsedQueued = JSON.parse(savedQueued);\n\nconst divideResultToPages = (array, page) => {\n  page = page - 1;\n  return array.slice(0 + 21 * page, 20 + 21 * page);\n};\n\nconst firstEntry = () => {\n  addFilms(divideResultToPages(parsedWatched, page));\n  changePage(Math.ceil(parsedWatched.length / 20), page);\n\n  pagination.addEventListener('click', event => {\n    if (isNaN(event.target.textContent)) return;\n    else {\n      page = Number(event.target.textContent);\n\n      const nextPage = divideResultToPages(parsedWatched, page);\n      scrollup();\n      addFilms(nextPage);\n      changePage(Math.ceil(parsedWatched.length / 20), page);\n\n      if (page == 1) prev.style.display = 'none';\n      else prev.style.display = 'block';\n\n      if (page == nextPage.total_pages) next.style.display = 'none';\n      else next.style.display = 'block';\n    }\n  });\n\n  if (page > 1) {\n    prev.addEventListener('click', () => {\n      page = page - 1;\n      const nextPage = divideResultToPages(parsedWatched, page);\n      scrollup();\n      addFilms(nextPage);\n      changePage(Math.ceil(parsedWatched.length / 20), page);\n      if (page === 1) prev.style.display = 'none';\n      next.style.display = 'block';\n    });\n  }\n\n  next.addEventListener('click', () => {\n    page = page + 1;\n    const nextPage = divideResultToPages(parsedWatched, page);\n    scrollup();\n    addFilms(nextPage);\n    changePage(Math.ceil(parsedWatched.length / 20), page);\n    if (page === nextPage.total_pages) next.style.display = 'none';\n    prev.style.display = 'block';\n  });\n};\n\nfirstEntry();\n\nwatchedButton.addEventListener('click', e => {\n  e.preventDefault;\n  page = 1;\n  addFilms(divideResultToPages(parsedWatched, page));\n  changePage(Math.ceil(parsedWatched.length / 20), page);\n  watchedButton.classList.add('current-page');\n  queueButton.classList.remove('current-page');\n\n  pagination.addEventListener('click', event => {\n    if (isNaN(event.target.textContent)) return;\n    else {\n      page = Number(event.target.textContent);\n\n      const nextPage = divideResultToPages(parsedWatched, page);\n      scrollup();\n      addFilms(nextPage);\n      changePage(Math.ceil(parsedWatched.length / 20), page);\n\n      if (page == 1) prev.style.display = 'none';\n      else prev.style.display = 'block';\n\n      if (page == nextPage.total_pages) next.style.display = 'none';\n      else next.style.display = 'block';\n    }\n  });\n\n  if (page > 1) {\n    prev.addEventListener('click', () => {\n      page = page - 1;\n      const nextPage = divideResultToPages(parsedWatched, page);\n      scrollup();\n      addFilms(nextPage);\n      changePage(Math.ceil(parsedWatched.length / 20), page);\n      if (page === 1) prev.style.display = 'none';\n      next.style.display = 'block';\n    });\n  }\n\n  next.addEventListener('click', () => {\n    page = page + 1;\n    const nextPage = divideResultToPages(parsedWatched, page);\n    scrollup();\n    addFilms(nextPage);\n    changePage(Math.ceil(parsedWatched.length / 20), page);\n    if (page === nextPage.total_pages) next.style.display = 'none';\n    prev.style.display = 'block';\n  });\n});\n\nqueueButton.addEventListener('click', e => {\n  e.preventDefault;\n  page = 1;\n  addFilms(divideResultToPages(parsedQueued, page));\n  changePage(Math.ceil(parsedQueued.length / 20), page);\n  watchedButton.classList.remove('current-page');\n  queueButton.classList.add('current-page');\n\n  pagination.addEventListener('click', event => {\n    if (isNaN(event.target.textContent)) return;\n    else {\n      page = Number(event.target.textContent);\n\n      const nextPage = divideResultToPages(parsedQueued, page);\n      scrollup();\n      addFilms(nextPage);\n      changePage(Math.ceil(parsedQueued.length / 20), page);\n\n      if (page == 1) prev.style.display = 'none';\n      else prev.style.display = 'block';\n\n      if (page == nextPage.total_pages) next.style.display = 'none';\n      else next.style.display = 'block';\n    }\n  });\n\n  if (page > 1) {\n    prev.addEventListener('click', () => {\n      page = page - 1;\n      const nextPage = divideResultToPages(parsedQueued, page);\n      scrollup();\n      addFilms(nextPage);\n      changePage(Math.ceil(parsedQueued.length / 20), page);\n      if (page === 1) prev.style.display = 'none';\n      next.style.display = 'block';\n    });\n  }\n\n  next.addEventListener('click', () => {\n    page = page + 1;\n    const nextPage = divideResultToPages(parsedQueued, page);\n    scrollup();\n    addFilms(nextPage);\n    changePage(Math.ceil(parsedQueued.length / 20), page);\n    if (page === nextPage.total_pages) next.style.display = 'none';\n    prev.style.display = 'block';\n  });\n});\n"],"names":["$e990ca1027e65e86$export$23d29373114642a5","async","movieID","responseDetails","fetch","ok","Error","json","$8a7e756c566dd1ea$var$pagination","document","querySelector","$8a7e756c566dd1ea$var$filmList","$8a7e756c566dd1ea$var$prev","$8a7e756c566dd1ea$var$next","$8a7e756c566dd1ea$var$watchedButton","$8a7e756c566dd1ea$var$queueButton","$8a7e756c566dd1ea$var$page","$8a7e756c566dd1ea$var$modalPicture","$8a7e756c566dd1ea$var$modalTitle","$8a7e756c566dd1ea$var$modalRating","$8a7e756c566dd1ea$var$modalVotes","$8a7e756c566dd1ea$var$modalPopularity","$8a7e756c566dd1ea$var$modalOriginalTitle","$8a7e756c566dd1ea$var$modalGenre","$8a7e756c566dd1ea$var$modalDescription","$8a7e756c566dd1ea$var$modalBtnWatched","$8a7e756c566dd1ea$var$modalBtnQueued","$8a7e756c566dd1ea$var$changePage","totalPages","page1","activeLi","liTag","beforePages","afterPages","innerHTML","i","pageLength","style","display","$8a7e756c566dd1ea$var$addFilms","movies","markup","map","film","id","poster_path","title","genres","genre","name","join","release_date","querySelectorAll","forEach","addEventListener","e","preventDefault","filmId","target","dataset","console","log","filmData","src","vote_average","toFixed","vote_count","popularity","original_title","overview","$8a7e756c566dd1ea$var$ChangeFilmInfo","watchedFilmsStorage","push","watchUniqueByKey","Map","item","values","localStorage","setItem","JSON","stringify","queuedFilmsStorage","queueUniqueByKey","refs","openModalBtn","closeModalBtn","modal","toggleModal","classList","toggle","open","contains","add","key","$8a7e756c566dd1ea$var$scrollup","window","scrollTo","top","left","behavior","$8a7e756c566dd1ea$var$savedWatched","getItem","$8a7e756c566dd1ea$var$savedQueued","$8a7e756c566dd1ea$var$parsedWatched","parse","$8a7e756c566dd1ea$var$parsedQueued","$8a7e756c566dd1ea$var$divideResultToPages","array","page2","slice","Math","ceil","length","event","isNaN","textContent","Number","nextPage","total_pages","remove"],"version":3,"file":"myLibrarySite.dd26b7e4.js.map"}